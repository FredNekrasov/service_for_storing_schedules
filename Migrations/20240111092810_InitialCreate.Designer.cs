// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web_API_for_scheduling.models;

#nullable disable

namespace Web_API_for_scheduling.Migrations
{
    [DbContext(typeof(TimetableDbContext))]
    [Migration("20240111092810_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Pair", b =>
                {
                    b.Property<Guid>("PairID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AudienceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PairID");

                    b.HasIndex("AudienceID");

                    b.HasIndex("GroupID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Pair");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Subject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConsultationHours")
                        .HasColumnType("int");

                    b.Property<int?>("LectureHours")
                        .HasColumnType("int");

                    b.Property<int?>("PracticHours")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfCertification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Teacher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Users", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Day", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FifthPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FirstPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FourthPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SecondPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SeventhPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SixthPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThirdPairID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WeekID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("FifthPairID");

                    b.HasIndex("FirstPairID");

                    b.HasIndex("FourthPairID");

                    b.HasIndex("SecondPairID");

                    b.HasIndex("SeventhPairID");

                    b.HasIndex("SixthPairID");

                    b.HasIndex("ThirdPairID");

                    b.HasIndex("WeekID");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Semester", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsEven")
                        .HasColumnType("bit");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Week", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SemesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SemesterID");

                    b.ToTable("Week");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.rooms.Audience", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudienceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AudienceTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SeatsNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StudentNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AudienceTypeID");

                    b.ToTable("Audience");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.rooms.AudienceType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AudienceType");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Pair", b =>
                {
                    b.HasOne("Web_API_for_scheduling.Models.entities.rooms.Audience", "Audience")
                        .WithMany("Pairs")
                        .HasForeignKey("AudienceID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Group", "Group")
                        .WithMany("Pairs")
                        .HasForeignKey("GroupID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Subject", "Subject")
                        .WithMany("Pairs")
                        .HasForeignKey("SubjectID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Teacher", "Teacher")
                        .WithMany("Pairs")
                        .HasForeignKey("TeacherID");

                    b.Navigation("Audience");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Day", b =>
                {
                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair5")
                        .WithMany("Days4")
                        .HasForeignKey("FifthPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair1")
                        .WithMany("Days")
                        .HasForeignKey("FirstPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair4")
                        .WithMany("Days3")
                        .HasForeignKey("FourthPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair2")
                        .WithMany("Days1")
                        .HasForeignKey("SecondPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair7")
                        .WithMany("Days6")
                        .HasForeignKey("SeventhPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair6")
                        .WithMany("Days5")
                        .HasForeignKey("SixthPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.Pair", "Pair3")
                        .WithMany("Days2")
                        .HasForeignKey("ThirdPairID");

                    b.HasOne("Web_API_for_scheduling.Models.entities.date.Week", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekID");

                    b.Navigation("Pair1");

                    b.Navigation("Pair2");

                    b.Navigation("Pair3");

                    b.Navigation("Pair4");

                    b.Navigation("Pair5");

                    b.Navigation("Pair6");

                    b.Navigation("Pair7");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Week", b =>
                {
                    b.HasOne("Web_API_for_scheduling.Models.entities.date.Semester", "Semester")
                        .WithMany("Weeks")
                        .HasForeignKey("SemesterID");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.rooms.Audience", b =>
                {
                    b.HasOne("Web_API_for_scheduling.Models.entities.rooms.AudienceType", "AudienceType")
                        .WithMany("Rooms")
                        .HasForeignKey("AudienceTypeID");

                    b.Navigation("AudienceType");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Group", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Pair", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Days1");

                    b.Navigation("Days2");

                    b.Navigation("Days3");

                    b.Navigation("Days4");

                    b.Navigation("Days5");

                    b.Navigation("Days6");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Subject", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.Teacher", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Semester", b =>
                {
                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.date.Week", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.rooms.Audience", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("Web_API_for_scheduling.Models.entities.rooms.AudienceType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
